'use strict';

/**
 * @namespace restak.query
 */
/**
 * @namespace restak.query.antlr
 */

/**
 * @interface Query
 * @memberof restak.query
 */

/**
 * Query a data store with a {@link QueryRequest|query request} object.
 *
 * @function
 * @name restak.query.Query#execute
 * @param {restak.query.QueryRequest} request - The query to execute against the set of data.
 * @param {restak.query.Query~QueryCallback} callback - The callback that handles the result.
 */

/*
	TODO add sort fields, direction to request, result
*/

/**
 * Instructions for executing a query.
 *
 * @typedef QueryRequest
 * @memberof restak.query
 * @type {object}
 * @property {string} filter - The filter to apply when querying the data
 * @property {string} sort - The sort to apply when querying the data
 * @property {Number} pageSize - The number of items to return OR 'ALL' to return all items
 * @property {Number} page - The page of the filtered dataset to return
 */

/**
 * The result of executing a query.
 * 
 * @typedef QueryResult
 * @memberof restak.query
 * @property {string} filter - The filter that was applied when querying the data
 * @property {string} sort - The sort that was applied when querying the data
 * @property {Array} items - The items being returned from the query
 * @property {Number} pageSize - The number of items in the page
 * @property {?Number} pageCount - The number of pages, if available
 * @property {?Number} totalCount - The total number of items, if available
 * @property {Number} page - The page of data that was returned
 */

/**
 * Callback definition for the execution of a query.
 *
 * @callback Query~QueryCallback
 * @memberof restak.query
 * @param {Object} error - An error if one occurred, otherwise null.
 * @param {restak.query.QueryResult} result - The result of the query.
 * @see Query#execute
 */

// Generated classes by the antlr tool
/**
 * Generated by the antlr tool.
 *
 * @interface QueryListener
 * @memberof restak.query.antlr
 */

/**
 * A factory that contians queries that can be accessed later to use.
 *
 * @interface QueryFactory
 * @memberof restak.query
 */

/**
 * Register a query for use later.
 *
 * @function
 * @name restak.query.QueryFactory#registerQuery
 * @param {string} queryKey - The key that identifies the query.
 * @param {restak.query.Query} query - The query.
 * @return {boolean} true if the query was registered, otherwise false.
 */

/**
 * Get a query to use.
 *
 * @function
 * @name restak.query.QueryFactory#getQuery
 * @param {string} queryKey - The key that identifies the query.
 * @return {restak.query.Query} the query.
 * @throws {restak.query.QueryNotFoundError}
 */

 /**
 * Has a query with the given key been registered.
 *
 * @function
 * @name restak.query.QueryFactory#hasQuery
 * @param {string} queryKey - The key that identifies the query.
 * @return {boolean} true if there is a query, otherwise false;
 */

/**
 * An error describing the use of a query that has not been registered.
 *
 * @constructor
 * @memberof restak.query
 */
var QueryNotFoundError = function(queryKey){
	this.queryKey = queryKey;
	this.message = 'Unknown query: ' + queryKey;
};
module.exports.QueryNotFoundError = QueryNotFoundError;

module.exports.QueryExecutor = require('./query-executor');
module.exports.antlr = require('./antlr');
module.exports.objectQuery = require('./object-query');